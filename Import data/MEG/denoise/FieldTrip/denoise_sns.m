function [data] = denoise_sns(cfg,data)% DENOISE the data using the SNS algorithm%% Use as%   data = denoise_sns(cfg, data)%% The data should be organised in a structure as obtained from the% PREPROCESSING function. The configuration should be according to%%   cfg.channel     = include only these channels (default =  all)%   cfg.nneighbours = number of channels to regress on (default = 10)%   cfg.skip        = number of channels to skip (default =  0)%   cfg.toobig1     = ignore samples with absolute value > toobig1 (default =  keep all)%   cfg.toobig2     = ignore samples with value > toobig2 * weighted mean (default =  keep all)%   cfg.repeat      = number of times to reiterate sns (default = 1)%% This implements:%   de Cheveigne, A. and Simon, J. Z. (2008). "Sensor Noise Suppression"%   Journal of Neuroscience Methods 168: 195-202.% TODO % - rename the loop variables from "o, k, n, m" into something that is easier to read% - get it to work on variable trial length data% - move the outlier detection to another function (artifact_threahold probably does it already)% - check the literature reference% Copyright 2007/2008 Alain de Cheveigne, Laboratoire de Psychologie de la Perception,% CNRS and Universite Paris Descartes, and Departement d'Etudes Cognitives, Ecole% Normale Superieure, Paris.  This software is provided as-is with no warranty.% This software is provided for SCIENTIFIC RESEARCH purposes only.  If you use the% tools (or the algorithms, or the ideas) in your research, you MUST cite the% references below in all publications derived from this research.  If you wish to use% these tools (or the algorithms, or the ideas) in a product, you MUST contact% Alain.de.Cheveigne AT ens.fr for permission and/or licensing details.%% $Log: denoise_sns.m,v $% Revision 1.2  2008/03/14 12:04:19  roboos% added trial selection for consistency with other fieldtrip functions%% Revision 1.1  2008/03/14 11:57:01  roboos% initial implementation based on wrap_sns, code+documentation cleanup to make it more fieldtrip-like%% check that the low-level toolbox is available and on the pathhastoolbox('denoise', 1);% the data must be as obtained from preprocessingdata = checkdata(data, 'datatype', 'raw', 'hasoffset', 'no');% set the defaultsif ~isfield(cfg, 'nneighbours'), cfg.nneighbours=10; endif ~isfield(cfg, 'skip'),        cfg.skip=0;         endif ~isfield(cfg, 'toobig1'),     cfg.toobig1=[];     endif ~isfield(cfg, 'toobig2'),     cfg.toobig2=[];     endif ~isfield(cfg, 'channel'),     cfg.channel='all';  endif ~isfield(cfg, 'repeat'),      cfg.repeat=1;       endif ~isfield(cfg, 'trials'),      cfg.trials = 'all'; end% select trials of interestif ~strcmp(cfg.trials, 'all')  fprintf('selecting %d trials\n', length(cfg.trials));  data.trial  = data.trial(cfg.trials);  data.time   = data.time(cfg.trials);  % update the trial definition (trl)  if isfield(data, 'cfg') % try to locate the trl in the nested configuration    trl = findcfg(data.cfg, 'trl');  else    trl = [];  end  if isempty(trl)    % a trial definition is expected in each continuous data set    warning('could not locate the trial definition ''trl'' in the data structure');  else    cfg.trlold=trl;    cfg.trl=trl(cfg.trials,:);  endend% select channelscfg.channel     = channelselection(cfg.channel, data.label);chansel         = match_str(data.label, cfg.channel);display('  transfer data to 3D matrix...');o = numel(data.trial);[n,m] = size(data.trial{1});x = zeros(m,numel(chansel),o);for k = 1:o  if [n,m] ~=  size(data.trial{k}); error(['unexpected size for trial ',num2str(k),': ',num2str(size(data.trial{k}))]); end  xx = data.trial{k}';  x(:,:,k) = xx(:,chansel);endwhile cfg.repeat>0  if ~isempty(cfg.toobig1) || ~isempty(cfg.toobig2)    display('  find outliers...');    w = find_outliers(x,cfg.toobig1,cfg.toobig2);    w = min(w,[],2);    disp(['  done, ',num2str(100*(1 - sum(w(:)/numel(w)))), '% of samples will be ignored by SNS']);  else    w = [];  end  disp('  call sns()...');  p0 = wpwr(x);  p1 = wpwr(x,w);  x = sns(x,cfg.nneighbours,cfg.skip,w);  p2 = wpwr(x);  p3 = wpwr(x,w);  disp(['  done, remains ',num2str(100*p2/p0),'% of power (weighted: ',num2str(100*p3/p1), '%)']);  cfg.repeat = cfg.repeat-1;  if cfg.repeat>0; disp(['  reiterate (',num2str(cfg.repeat),' to go):']); endenddisp('  transfer data back to fieldtrip struct...');for k = 1:o  xx = data.trial{k}';  xx(:,chansel) = x(:,:,k);  data.trial{k} = xx';enddisp('done')% add version information to the configurationtry  % get the full name of the function  cfg.version.name = mfilename('fullpath');catch  % required for compatibility with Matlab versions prior to release 13 (6.5)  [st, i] = dbstack;  cfg.version.name = st(i);endcfg.version.id = '$Id: denoise_sns.m,v 1.2 2008/03/14 12:04:19 roboos Exp $';% remember the configuration details of the input datatry, cfg.previous = data.cfg; end% remember the exact configuration details in the outputdata.cfg = cfg;